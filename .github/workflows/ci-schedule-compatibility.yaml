name: APIServer compatibility
on:
  workflow_dispatch: {}

jobs:
  e2e:
    name: e2e test
    # prevent job running from forked repository
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        kubeapiserver-version: [ v1.21.10, v1.22.7, v1.23.4, v1.24.2, v1.25.0, v1.26.0, v1.27.3, v1.28.0 ]
        karmada-version: [ release-1.4, release-1.5, release-1.6 ]

        include:
        - karmada-version: release-1.4
          go-version: 1.19.5

        - karmada-version: release-1.5
          go-version: 1.19.5

        - karmada-version: release-1.6
          go-version: 1.20.5

    steps:
      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false
      - name: checkout code
        uses: actions/checkout@v3
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # We need to guess version via git tags.
          fetch-depth: 0
          repository: karmada-io/karmada
          ref: ${{ matrix.karmada-version }}
      - name: install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: setup e2e test environment
        run: |
          hack/local-up-karmada.sh

          # Update images
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            set image deployment/karmada-apiserver -nkarmada-system \
            karmada-apiserver=registry.k8s.io/kube-apiserver:${{ matrix.kubeapiserver-version }}
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            set image deployment/karmada-kube-controller-manager -nkarmada-system \
            kube-controller-manager=registry.k8s.io/kube-controller-manager:${{ matrix.kubeapiserver-version }}

          # Wait ready
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            rollout status deployment/karmada-kube-controller-manager -nkarmada-system --timeout=5m
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            rollout status deployment/karmada-apiserver -nkarmada-system --timeout=5m
      - name: run e2e
        run: |
          export ARTIFACTS_PATH=${{ github.workspace }}/karmada-e2e-logs/${{ matrix.kubeapiserver-version }}-${{ matrix.karmada-version }}/
          hack/run-e2e.sh
      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: karmada_e2e_log_${{ matrix.k8s }}
          path: ${{ github.workspace }}/karmada-e2e-logs/${{ matrix.kubeapiserver-version }}-${{ matrix.karmada-version }}/
      - name: upload kind logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: karmada_kind_log_${{ matrix.k8s }}
          path: /tmp/karmada/
      - name: Start SSH via Ngrok
        if: ${{ failure() }}
        run: |
          curl -sL https://gist.githubusercontent.com/retyui/7115bb6acf151351a143ec8f96a7c561/raw/7099b9db76729dc5761da72aa8525f632d8875c9/debug-github-actions.sh | bash
        env:
          # After sign up on the https://ngrok.com/
          # You can find this token here: https://dashboard.ngrok.com/get-started/setup
          NGROK_TOKEN: 2EoClRIRHBiKG3Ytb1tVsDvS8sS_2BQKL6W51EwumB7ja6ndx
          # This password you will use when authorizing via SSH
          USER_PASS: karmadagreat123

      - name: Don't kill instace
        if: ${{ failure() }}
        run: sleep 1h # Prevent to killing instance after failure
